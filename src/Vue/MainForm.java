package Vue;

import DAO.ChambreDAO;
import DAO.*;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import modele.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Panda
 */
public class MainForm extends javax.swing.JPanel {

//    CellEditorListener ChangeNotification = new CellEditorListener() {
//        @Override
//        public void editingCanceled(ChangeEvent e) {
//            System.out.println("The user canceled editing.");
//        }
//
//        @Override
//        public void editingStopped(ChangeEvent e) {
//            System.out.println("The user stopped editing successfully.");
//            System.out.println();
//        }
//    };
    /**
     * Creates new form NewJPanel
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        LabelTable = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        L1 = new javax.swing.JLabel();
        L2 = new javax.swing.JLabel();
        L3 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        L5 = new javax.swing.JLabel();
        L6 = new javax.swing.JLabel();
        L7 = new javax.swing.JLabel();
        L8 = new javax.swing.JLabel();
        L9 = new javax.swing.JLabel();
        L10 = new javax.swing.JLabel();
        T1 = new javax.swing.JTextField();
        T2 = new javax.swing.JTextField();
        T3 = new javax.swing.JTextField();
        T4 = new javax.swing.JTextField();
        T5 = new javax.swing.JTextField();
        T7 = new javax.swing.JTextField();
        T8 = new javax.swing.JTextField();
        ComboB = new javax.swing.JComboBox();
        Combo1 = new javax.swing.JComboBox();
        Combo2 = new javax.swing.JComboBox();
        Combo3 = new javax.swing.JComboBox();
        L11 = new javax.swing.JLabel();
        BoutonAjo = new javax.swing.JButton();
        PanelChoix = new javax.swing.JScrollPane();
        Table_md = new javax.swing.JTable();
        L12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        PanelLecture = new javax.swing.JScrollPane();
        table_aff = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        BoutonSuppr = new javax.swing.JToggleButton();
        LabelChoix = new javax.swing.JLabel();
        choix_table = new javax.swing.JComboBox();
        BoutonAff = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jOptionPane1 = new javax.swing.JOptionPane();

        LabelTable.setText("Table :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chambre", "Docteur", "Infirmier", "Malade", "Service" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        L1.setVisible(false);
        L1.setText("L1");

        L2.setVisible(false);
        L2.setText("L2");

        L3.setVisible(false);
        L3.setText("L3");

        L4.setVisible(false);
        L4.setText("L4");

        L5.setVisible(false);
        L5.setText("L5");

        L6.setVisible(false);
        L6.setText("L6");

        L7.setVisible(false);
        L7.setText("L7");

        L8.setVisible(false);
        L8.setText("L8");

        L9.setVisible(false);
        L9.setText("L9");

        L10.setVisible(false);
        L10.setText("L10");

        T1.setVisible(false);
        T1.setToolTipText("");
        T1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        T1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T1ActionPerformed(evt);
            }
        });

        T2.setVisible(false);
        T2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        T3.setVisible(false);
        T3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T3ActionPerformed(evt);
            }
        });

        T4.setVisible(false);

        T5.setVisible(false);

        T7.setVisible(false);
        T7.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        T7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T7ActionPerformed(evt);
            }
        });

        T8.setVisible(false);
        T8.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        T8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T8ActionPerformed(evt);
            }
        });

        ComboB.setVisible(false);
        ComboB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBActionPerformed(evt);
            }
        });

        Combo1.setVisible(false);
        Combo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo1ActionPerformed(evt);
            }
        });

        Combo2.setVisible(false);
        Combo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo2ActionPerformed(evt);
            }
        });

        Combo3.setVisible(false);
        Combo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo3ActionPerformed(evt);
            }
        });

        L11.setVisible(false);
        L11.setText("L11");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L6)
                    .addComponent(T5, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L5)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L2)
                            .addComponent(L3)
                            .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(T4, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L4)
                            .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L1))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(T8)
                                        .addComponent(L8)
                                        .addComponent(L7)
                                        .addComponent(T7)
                                        .addComponent(Combo1, 0, 227, Short.MAX_VALUE)
                                        .addComponent(Combo3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 227, Short.MAX_VALUE))
                                    .addComponent(L9))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(L10)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(Combo2, 0, 227, Short.MAX_VALUE)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(L11)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(20, 20, 20))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L1)
                    .addComponent(L9)
                    .addComponent(L10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Combo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Combo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L2)
                    .addComponent(L7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L3)
                    .addComponent(L8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L4)
                    .addComponent(L11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Combo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(T5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        BoutonAjo.setText("Ajouter");
        BoutonAjo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjoActionPerformed(evt);
            }
        });

        PanelChoix.setVisible(false);

        Table_md.setVisible(false);
        PanelChoix.setViewportView(Table_md);

        L12.setVisible(false);
        L12.setText("L12");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LabelTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(BoutonAjo))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L12))))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTable)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(L12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                .addComponent(BoutonAjo)
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("Ajout", jPanel2);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        table_aff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        PanelLecture.setViewportView(table_aff);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(PanelLecture, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelLecture, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 924, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5);

        BoutonSuppr.setText("supprimer");
        BoutonSuppr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonSupprActionPerformed(evt);
            }
        });

        LabelChoix.setText("Table à afficher :");

        choix_table.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Malade", "Chambre", "Infirmier", "Service", "Docteur", "Employe", "Hospitalisation" }));

        BoutonAff.setText("Afficher");
        BoutonAff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BoutonSuppr, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(LabelChoix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choix_table, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BoutonAff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BoutonSuppr)
                .addGap(18, 18, 18)
                .addComponent(LabelChoix)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choix_table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 798, Short.MAX_VALUE)
                .addComponent(BoutonAff)
                .addContainerGap())
        );

        jPanel1.add(jPanel6);

        jTabbedPane1.addTab("Lecture et Modification", jPanel1);

        jButton1.setText("Test_reporting");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(793, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(766, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reporting", jPanel4);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.PAGE_AXIS));

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jOptionPane1.setVisible(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(379, 379, 379)
                        .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jButton2)))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jButton2)
                .addGap(272, 272, 272)
                .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(480, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel7);

        jTabbedPane1.addTab("Requête", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int type = -1; //stocke un int pour connaitre quelle table est actuellement affichée

    /**
     *
     * @param row
     * @param sql si sql = 0 : update, si sql = 1 : delete
     */
    public void trObjTab(int row, int sql) {
        switch (type) {
            case 0:
                MaladeDAO maDAO = new MaladeDAO();
                Malade ma = new Malade();
                ma.setNumero(Integer.parseInt(table_aff.getValueAt(row, 0).toString()));
                ma.setNom(table_aff.getValueAt(row, 1).toString());
                ma.setPrenom(table_aff.getValueAt(row, 2).toString());
                ma.setAdresse(table_aff.getValueAt(row, 3).toString());
                ma.setTel(table_aff.getValueAt(row, 4).toString());
                ma.setMutuelle(table_aff.getValueAt(row, 5).toString());

                if (sql == 0) {
                    maDAO.update(ma);
                    System.out.println("updated");
                } else if (sql == 1) {
                    maDAO.delete(ma);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }
                break;
            case 1:
                ChambreDAO chDAO = new ChambreDAO();
                Chambre ch = new Chambre();
                ch.setCode_service(table_aff.getValueAt(row, 0).toString());
                ch.setNo_chambre(Integer.parseInt(table_aff.getValueAt(row, 1).toString()));
                ch.setSurveillant(Integer.parseInt(table_aff.getValueAt(row, 2).toString()));
                ch.setNb_lits(Integer.parseInt(table_aff.getValueAt(row, 3).toString()));

                if (sql == 0) {
                    chDAO.update(ch);
                } else if (sql == 1) {
                    chDAO.delete(ch);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }
                break;
            case 2:
                InfirmierDAO infDAO = new InfirmierDAO();
                Infirmier inf = new Infirmier();
                inf.setNumero(Integer.parseInt(table_aff.getValueAt(row, 0).toString()));
                inf.setNom(table_aff.getValueAt(row, 1).toString());
                inf.setPrenom(table_aff.getValueAt(row, 2).toString());
                inf.setTel(table_aff.getValueAt(row, 3).toString());
                inf.setAdresse(table_aff.getValueAt(row, 4).toString());
                inf.setCode_service(table_aff.getValueAt(row, 5).toString());
                inf.setRotation(table_aff.getValueAt(row, 6).toString());
                inf.setSalaire(Double.parseDouble(table_aff.getValueAt(row, 7).toString()));

                if (sql == 0) {
                    infDAO.update(inf);
                    System.out.println("updated");
                } else if (sql == 1) {
                    infDAO.delete(inf);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }
                break;
            case 3:
                //"Code", "Nom", "Batiment", "Directeur"
                ServiceDAO seDAO = new ServiceDAO();
                Service se = new Service();

                se.setCode(table_aff.getValueAt(row, 0).toString());
                se.setNom(table_aff.getValueAt(row, 1).toString());
                se.setBatiment(table_aff.getValueAt(row, 2).toString());
                se.setDirecteur(Integer.parseInt(table_aff.getValueAt(row, 3).toString()));

                if (sql == 0) {
                    seDAO.update(se);
                } else if (sql == 1) {
                    seDAO.delete(se);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }

                break;
            case 4: //Docteur
                //Numero", "Nom", "Prenom", "Telephone", "Adresse", "Specialite"
                DocteurDAO doDAO = new DocteurDAO();
                Docteur doc = new Docteur();

                doc.setNumero(Integer.parseInt(table_aff.getValueAt(row, 0).toString()));
                doc.setNom(table_aff.getValueAt(row, 1).toString());
                doc.setPrenom(table_aff.getValueAt(row, 2).toString());
                doc.setTel(table_aff.getValueAt(row, 3).toString());
                doc.setAdresse(table_aff.getValueAt(row, 4).toString());
                doc.setSpecialite(table_aff.getValueAt(row, 5).toString());

                if (sql == 0) {
                    doDAO.update(doc);
                } else if (sql == 1) {
                    doDAO.delete(doc);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }

                break;
            case 5: //employe
                //Numero", "Nom", "Prenom", "Telephone", "Adresse
                EmployeDAO empDAO = new EmployeDAO();
                Employe emp = new Employe();

                emp.setNumero(Integer.parseInt(table_aff.getValueAt(row, 0).toString()));
                emp.setNom(table_aff.getValueAt(row, 1).toString());
                emp.setPrenom(table_aff.getValueAt(row, 2).toString());
                emp.setTel(table_aff.getValueAt(row, 3).toString());
                emp.setAdresse(table_aff.getValueAt(row, 4).toString());

                if (sql == 0) {
                    empDAO.update(emp);
                } else if (sql == 1) {
                    empDAO.delete(emp);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }
                break;
            case 6: //hospitalisation
                //Numero Malade", "Code service", "Numero Chambre", "Lit
                HospitalisationDAO hopDAO = new HospitalisationDAO();
                Hospitalisation hop = new Hospitalisation();

                hop.setNo_malade(Integer.parseInt(table_aff.getValueAt(row, 0).toString()));
                hop.setCode_service(table_aff.getValueAt(row, 1).toString());
                hop.setNo_chambre(Integer.parseInt(table_aff.getValueAt(row, 2).toString()));
                hop.setNo_lit(Integer.parseInt(table_aff.getValueAt(row, 3).toString()));

                if (sql == 0) {
                    hopDAO.update(hop);
                } else if (sql == 1) {
                    hopDAO.delete(hop);
                } else {
                    System.out.println("choix de commande sql erroné (mauvaise valeur de int sql)");
                }
                break;
        }
    }

    public void afficher_table() {
        //declaration des variables communes aux cases
        //DefaultTableModel tableModel = new DefaultTableModel(0, 0);
        CustomModel tableModel = new CustomModel();

        //listener pour prendre en compte les modifications
        tableModel.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent tme) {
                if (tme.getType() == TableModelEvent.UPDATE && tme.getColumn() != (tableModel.getColumnCount() - 1)) {
                    if (tme.getFirstRow() != TableModelEvent.HEADER_ROW) {
                        System.out.println("");
                        System.out.println("Cell " + tme.getFirstRow() + ", "
                                + tme.getColumn() + " changed. The new value: "
                                + table_aff.getValueAt(tme.getFirstRow(),
                                        tme.getColumn()));
                        trObjTab(tme.getFirstRow(), 0);
                    }
                }
            }
        });

        ArrayList tab;
        String[] title;

        switch (choix_table.getSelectedIndex()) {
            case 0: //malade
                //declaration d'une nouvelle classe DAO
                MaladeDAO maDAO = new MaladeDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = maDAO.all();

                //création des titres des colonnes
                title = new String[]{"Numero", "Nom", "Prenom", "Adresse", "Tel", "Mutuelle", "tab docteur", "Supprimer"};
                //tableModel = new DefaultTableModel(title, 0);
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Malade elem = (Malade) tab.get(i);
                    Object obj[] = {
                        elem.getNumero(),
                        elem.getNom(),
                        elem.getPrenom(),
                        elem.getAdresse(),
                        elem.getTel(),
                        elem.getMutuelle(),
                        elem.getTab_docteur(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 1: //chambre
                //declaration d'une nouvelle classe DAO
                ChambreDAO chDAO = new ChambreDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = chDAO.all();

                //création des titres des colonnes
                title = new String[]{"Code service", "No Chambre", "Surveillant", "Nb de lits", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Chambre elem = (Chambre) tab.get(i);
                    Object obj[] = {
                        elem.getCode_service(),
                        elem.getNo_chambre(),
                        elem.getSurveillant(),
                        elem.getNb_lits(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 2: //infirmier
                //declaration d'une nouvelle classe DAO
                InfirmierDAO infDAO = new InfirmierDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = infDAO.all();

                //création des titres des colonnes
                title = new String[]{"Numero", "Nom", "Prenom", "Telephone", "Adresse", "Code Service", "Rotation", "Salaire", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Infirmier elem = (Infirmier) tab.get(i);
                    Object obj[] = {
                        elem.getNumero(),
                        elem.getNom(),
                        elem.getPrenom(),
                        elem.getTel(),
                        elem.getAdresse(),
                        elem.getCode_service(),
                        elem.getRotation(),
                        elem.getSalaire(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 3: //Service
                //declaration d'une nouvelle classe DAO
                ServiceDAO servDAO = new ServiceDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = servDAO.all();

                //création des titres des colonnes
                title = new String[]{"Code", "Nom", "Batiment", "Directeur", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Service elem = (Service) tab.get(i);
                    Object obj[] = {
                        elem.getCode(),
                        elem.getNom(),
                        elem.getBatiment(),
                        elem.getDirecteur(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 4: //Docteur
                //declaration d'une nouvelle classe DAO
                DocteurDAO docDAO = new DocteurDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = docDAO.all();

                //création des titres des colonnes
                title = new String[]{"Numero", "Nom", "Prenom", "Telephone", "Adresse", "Specialite", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Docteur elem = (Docteur) tab.get(i);
                    Object obj[] = {
                        elem.getNumero(),
                        elem.getNom(),
                        elem.getPrenom(),
                        elem.getTel(),
                        elem.getAdresse(),
                        elem.getSpecialite(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 5: //employe
                //declaration d'une nouvelle classe DAO
                EmployeDAO empDAO = new EmployeDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = empDAO.all();

                //création des titres des colonnes
                title = new String[]{"Numero", "Nom", "Prenom", "Telephone", "Adresse", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Employe elem = (Employe) tab.get(i);
                    Object obj[] = {
                        elem.getNumero(),
                        elem.getNom(),
                        elem.getPrenom(),
                        elem.getTel(),
                        elem.getAdresse(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
            case 6: //hospitalisation
                //declaration d'une nouvelle classe DAO
                HospitalisationDAO hopDAO = new HospitalisationDAO();

                //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
                tab = hopDAO.all();

                //création des titres des colonnes
                title = new String[]{"Numero Malade", "Code service", "Numero Chambre", "Lit", "Supprimer"};
                tableModel.setColumnIdentifiers(title);

                //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
                for (int i = 0; i < tab.size(); i++) {
                    Hospitalisation elem = (Hospitalisation) tab.get(i);
                    Object obj[] = {
                        elem.getNo_malade(),
                        elem.getCode_service(),
                        elem.getNo_chambre(),
                        elem.getNo_lit(),
                        new Boolean(false)
                    };
                    tableModel.addRow(obj);
                }
                break;
        }
        type = choix_table.getSelectedIndex(); //stockage du type de la table affiché

        //affichage du JTable remplis avec les informations demandées par l'utilisateur
        table_aff.setModel(tableModel);
        PanelLecture.setViewportView(table_aff);

    }

    private void setNullText() {
        T1.setText("");
        T1.setToolTipText("");
        T2.setText("");
        T2.setToolTipText("");
        T3.setText("");
        T3.setToolTipText("");
        T4.setText("");
        T4.setToolTipText("");
        T5.setText("");
        T5.setToolTipText("");
        T7.setText("");
        T7.setToolTipText("");
        T8.setText("");
        T8.setToolTipText("");

    }

    private void setAllServiceComboBox() {
        ArrayList tab;
        ServiceDAO servDAO = new ServiceDAO();
        tab = servDAO.all();
        Combo1.removeAllItems();
        for (int i = 0; i < tab.size(); i++) {
            Service serv = (Service) tab.get(i);
            String code = serv.getCode();
            Combo1.addItem(code);
        }
    }

    private void setAllInfirmierComboBox() {
        ArrayList tab;
        InfirmierDAO infDAO = new InfirmierDAO();
        tab = infDAO.all();
        Combo2.removeAllItems();
        for (int i = 0; i < tab.size(); i++) {
            Infirmier inf = (Infirmier) tab.get(i);
            int numero = inf.getNumero();
            Combo2.addItem(numero);
        }
    }

    private void setAllDocteurComboBox() {
        ArrayList tab;
        DocteurDAO docDAO = new DocteurDAO();
        tab = docDAO.all();
        Combo3.removeAllItems();
        for (int i = 0; i < tab.size(); i++) {
            Docteur doc = (Docteur) tab.get(i);
            int numero = doc.getNumero();
            Combo3.addItem(numero);
        }
    }

    private void setAllDocteurTable() {
        ArrayList tab;
        String[] title;
        CustomModel tableModel = new CustomModel();

        //declaration d'une nouvelle classe DAO
        DocteurDAO docDAO = new DocteurDAO();

        //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
        tab = docDAO.all();

        //création des titres des colonnes
        title = new String[]{"Numero", "Nom", "Prenom", "Specialite", "est soigné par"};
        tableModel.setColumnIdentifiers(title);

        //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
        for (int i = 0; i < tab.size(); i++) {
            Docteur elem = (Docteur) tab.get(i);
            Object obj[] = {
                elem.getNumero(),
                elem.getNom(),
                elem.getPrenom(),
                elem.getSpecialite(),
                new Boolean(false),};
            tableModel.addRow(obj);
        }

        //affichage du JTable remplis avec les informations demandées par l'utilisateur
        Table_md.setModel(tableModel);
        PanelChoix.setViewportView(Table_md);
    }

    private void setAllMaladeTable() {
        ArrayList tab;
        String[] title;
        CustomModel tableModel = new CustomModel();

        //declaration d'une nouvelle classe DAO
        MaladeDAO maDAO = new MaladeDAO();

        //récupération de toutes lignes d'une table, chacune stockée dans un objet, et stockage dans un tableau
        tab = maDAO.all();

        //création des titres des colonnes
        title = new String[]{"Numero", "Nom", "Prenom", "soigne"};
        tableModel.setColumnIdentifiers(title);

        //pour chaque objet dans le tableau, on récupère les informations et on les ajoutes sur une nouvelle ligne du JTable
        for (int i = 0; i < tab.size(); i++) {
            Malade elem = (Malade) tab.get(i);
            Object obj[] = {
                elem.getNumero(),
                elem.getNom(),
                elem.getPrenom(),
                new Boolean(false),};
            tableModel.addRow(obj);
        }

        //affichage du JTable remplis avec les informations demandées par l'utilisateur
        Table_md.setModel(tableModel);
        PanelChoix.setViewportView(Table_md);
    }

    //Permet de rendre visible ou non nos boutons
    private void setVisibleAjout(boolean a) {
        L1.setVisible(a);
        T1.setVisible(a);
        L2.setVisible(a);
        T2.setVisible(a);
        L3.setVisible(a);
        T3.setVisible(a);
        L4.setVisible(a);
        T4.setVisible(a);
        L5.setVisible(a);
        T5.setVisible(a);
        L6.setVisible(a);
        ComboB.setVisible(a);
        L7.setVisible(a);
        T7.setVisible(a);
        L8.setVisible(a);
        T8.setVisible(a);
        L9.setVisible(a);
        Combo1.setVisible(a);
        L10.setVisible(a);
        Combo2.setVisible(a);
        L11.setVisible(a);
        Combo3.setVisible(a);
        L12.setVisible(a);
        PanelChoix.setVisible(a);
        Table_md.setVisible(a);

    }

    private void BoutonSupprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonSupprActionPerformed
        // TODO add your handling code here:
        //suppression des lignes sélectionnées
        CustomModel model = (CustomModel) table_aff.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            if ((Boolean) model.getValueAt(i, (model.getColumnCount() - 1))) {
                trObjTab(i, 1);
                model.removeRow(i);
                //affichage du JTable remplis avec les informations demandées par l'utilisateur
                table_aff.setModel(model);
                PanelLecture.setViewportView(table_aff);
            }
        }

    }//GEN-LAST:event_BoutonSupprActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        setAllServiceComboBox();
        setAllInfirmierComboBox();
        setAllDocteurComboBox();

        switch (jComboBox2.getSelectedItem().toString()) {
            case "Chambre":
                //On affiche rien pour l'instant
                setVisibleAjout(false);
                setNullText();
                //Label des champs nécessaire
                L1.setText("Numero chambre :");
                T1.setToolTipText("Le numero chambre doit etre comprise entre comprise entre 0 et 999");
                L9.setText("Code Service :");
                L10.setText("Surveillant :");
                L2.setText("Nombre de lits :");
                L2.setToolTipText("Le nombre de lits doit etre comprise entre comprise entre 0 et 99");
                //On affiche nos champs
                L1.setVisible(true);
                T1.setVisible(true);
                L9.setVisible(true);
                Combo1.setVisible(true);
                L10.setVisible(true);
                Combo2.setVisible(true);
                L2.setVisible(true);
                T2.setVisible(true);
                break;
            case "Docteur":
                setVisibleAjout(false);
                setNullText();
                setAllMaladeTable();
                L1.setText("No :");
                L2.setText("Nom :");
                T2.setToolTipText("12 caractères maximum");
                L3.setText("Prenom :");
                T3.setToolTipText("12 caractères maximum");
                L4.setText("Adresse :");
                T4.setToolTipText("40 caractères maximum");
                T4.setToolTipText("Format : Numero Rue, Codepostal Ville");
                L5.setText("Tel :");
                T5.setToolTipText("Format : 00 00 00 00 00");
                L6.setText("Specialite :");
                L12.setText("Soigne :");
                ComboB.removeAllItems();
                ComboB.addItem("Anesthesiste");
                ComboB.addItem("Cardiologue");
                ComboB.addItem("Generaliste");
                ComboB.addItem("Orthopediste");
                ComboB.addItem("Pneumologue");
                ComboB.addItem("Radiologue");
                ComboB.addItem("Traumatologue");
                L1.setVisible(true);
                T1.setVisible(true);
                L2.setVisible(true);
                T2.setVisible(true);
                L3.setVisible(true);
                T3.setVisible(true);
                L4.setVisible(true);
                T4.setVisible(true);
                L5.setVisible(true);
                T5.setVisible(true);
                L6.setVisible(true);
                L12.setVisible(true);
                ComboB.setVisible(true);
                PanelChoix.setVisible(true);
                Table_md.setVisible(true);
                break;
            case "Infirmier":
                setVisibleAjout(false);
                setNullText();
                L1.setText("No :");
                L2.setText("Nom :");
                T2.setToolTipText("12 caractères maximum");
                L3.setText("Prenom :");
                T3.setToolTipText("12 caractères maximum");
                L4.setText("Adresse :");
                T4.setToolTipText("40 caractères maximum");
                T4.setToolTipText("Format : Numero Rue, Codepostal Ville");
                L5.setText("Tel :");
                T5.setToolTipText("Format : 00 00 00 00 00");
                L6.setText("Rotation :");
                ComboB.removeAllItems();
                ComboB.addItem("JOUR");
                ComboB.addItem("NUIT");
                L9.setText("Code Service :");
                L7.setText("Salaire :");
                T7.setToolTipText("Format : 0.00");
                L1.setVisible(true);
                T1.setVisible(true);
                L2.setVisible(true);
                T2.setVisible(true);
                L3.setVisible(true);
                T3.setVisible(true);
                L4.setVisible(true);
                T4.setVisible(true);
                L5.setVisible(true);
                T5.setVisible(true);
                L6.setVisible(true);
                ComboB.setVisible(true);
                L9.setVisible(true);
                Combo1.setVisible(true);
                L7.setVisible(true);
                T7.setVisible(true);
                break;
            case "Malade":
                setVisibleAjout(false);
                setNullText();
                setAllDocteurTable();
                L1.setText("No :");
                L2.setText("Nom :");
                T2.setToolTipText("12 caractères maximum");
                L3.setText("Prenom :");
                T3.setToolTipText("12 caractères maximum");
                L4.setText("Adresse :");
                T4.setToolTipText("40 caractères maximum");
                T4.setToolTipText("Format : Numero Rue, Codepostal Ville");
                L5.setText("Tel :");
                T5.setToolTipText("Format : 00 00 00 00 00");
                L7.setText("Mutuelle :");
                T7.setToolTipText("6 caractères maximum");
                L12.setText("est soigné par :");
                L1.setVisible(true);
                T1.setVisible(true);
                L2.setVisible(true);
                T2.setVisible(true);
                L3.setVisible(true);
                T3.setVisible(true);
                L4.setVisible(true);
                T4.setVisible(true);
                L5.setVisible(true);
                T5.setVisible(true);
                L7.setVisible(true);
                T7.setVisible(true);
                L12.setVisible(true);
                PanelChoix.setVisible(true);
                Table_md.setVisible(true);
                break;
            case "Service":
                setVisibleAjout(false);
                setNullText();
                L1.setText("Code :");
                T1.setToolTipText("3 caractères maximum");
                L2.setText("Nom :");
                T2.setToolTipText("30 caractères maximum");
                L3.setText("Batiment :");
                T3.setToolTipText("1 caractère maximum");
                L11.setText("Directeur :");
                L1.setVisible(true);
                T1.setVisible(true);
                L2.setVisible(true);
                T2.setVisible(true);
                L3.setVisible(true);
                T3.setVisible(true);
                L11.setVisible(true);
                Combo3.setVisible(true);
                break;
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void BoutonAffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAffActionPerformed
        // TODO add your handling code here:
        afficher_table();
    }//GEN-LAST:event_BoutonAffActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("One", new Integer(10));
        pieDataset.setValue("Two", new Integer(20));
        pieDataset.setValue("Three", new Integer(30));
        pieDataset.setValue("Four", new Integer(40));
        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
        PiePlot p = (PiePlot) chart.getPlot();
        ChartPanel panel = new ChartPanel(chart);
        panel.setSize(450, 500);
        jPanel4.add(panel);
        jPanel4.repaint();
        jPanel4.revalidate();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void T1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T1ActionPerformed

    private void T3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T3ActionPerformed

    private void T7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T7ActionPerformed

    private void T8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T8ActionPerformed

    private void ComboBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBActionPerformed

    private void BoutonAjoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjoActionPerformed
        // TODO add your handling code here:
        ArrayList tab;
        boolean condition1 = false;
        boolean condition2 = false;
        boolean condition3 = false;
        boolean condition4 = false;
        boolean condition5 = false;
        boolean condition6 = false;

        String choix = jComboBox2.getSelectedItem().toString();
        switch (choix) {
            case "Chambre":
                if (T1.getText().length() > 3 || T1.getText().length() == 0) {
                    T1.setBackground(Color.red);
                    condition1 = false;
                } else {
                    condition1 = true;
                    T1.setBackground(Color.white);
                    try {
                        int test = Integer.parseInt(T1.getText());
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        condition1 = false;
                        jOptionPane1.showMessageDialog(null, "Le numero chambre doit être comprise entre 100 et 999", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }
                }

                if (T2.getText().length() > 2 || T2.getText().length() == 0) {
                    T2.setBackground(Color.red);
                    condition2 = false;
                } else {
                    T2.setBackground(Color.white);
                    condition2 = true;
                    try {
                        int test = Integer.parseInt(T2.getText());
                    } catch (NumberFormatException e) {
                        T2.setBackground(Color.red);
                        condition1 = false;
                        jOptionPane1.showMessageDialog(null, "Le nombre de lits doit être comprise entre comprise entre 0 et 99", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }
                }

                if (condition1 && condition2) {
                    DAO<Chambre> chambreDAO = new ChambreDAO();
                    try {
                        String code = Combo1.getSelectedItem().toString();
                        int no = Integer.parseInt(T1.getText());
                        int surveillant = (int) Combo2.getSelectedItem();
                        int lits = Integer.parseInt(T2.getText());

                        ChambreDAO chamDAO = new ChambreDAO();
                        tab = chamDAO.all();
                        for (int i = 0; i < tab.size(); i++) {
                            Chambre cham = (Chambre) tab.get(i);
                            int numero_test = cham.getNo_chambre();
                            String code_test = cham.getCode_service();
                            if ((no == numero_test) && (code.equals(code_test))) {
                                no = Integer.parseInt("a");
                            }
                        }

                        Chambre cham = new Chambre(code, no, surveillant, lits);
                        chambreDAO.create(cham);

                        jOptionPane1.showMessageDialog(null, "La chambre a bien été enregistré.", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                        setNullText();
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        jOptionPane1.showMessageDialog(null, "La chambre existe déjà dans la base de donnée", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                    }

                }
                break;

            case "Docteur":
                //BLINDAGE
                //No est vide 
                if (T1.getText().length() > 4 || T1.getText().length() == 0) {
                    T1.setBackground(Color.red);
                    condition1 = false;
                } else {
                    condition1 = true;
                    T1.setBackground(Color.white);
                    try {
                        int test = Integer.parseInt(T1.getText());
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        condition1 = false;
                        jOptionPane1.showMessageDialog(null, "Le numero du docteur doit être comprise entre 0 et 9999", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }
                }
                //Nom est vide
                if (T2.getText().length() > 12 || T2.getText().length() == 0) {
                    T2.setBackground(Color.red);
                    condition2 = false;
                } else {
                    condition2 = true;
                    T2.setBackground(Color.white);
                }
                //Prenom est vide
                if (T3.getText().length() > 12 || T3.getText().length() == 0) {
                    T3.setBackground(Color.red);
                    condition3 = false;
                } else {
                    condition3 = true;
                    T3.setBackground(Color.white);
                }
                //Adresse est vide
                if (T4.getText().length() > 40 || T4.getText().length() == 0) {
                    T4.setBackground(Color.red);
                    condition4 = false;
                } else {
                    condition4 = true;
                    T4.setBackground(Color.white);
                }

                //Tel est vide
                if (T5.getText().length() != 14) {
                    T5.setBackground(Color.red);
                    condition5 = false;
                    jOptionPane1.showMessageDialog(null, "Le format du tel doit être : 00 00 00 00 00", "ERREUR", JOptionPane.ERROR_MESSAGE);
                } else {
                    condition5 = true;
                    T5.setBackground(Color.white);
                }

                if (condition1 && condition2 && condition3 && condition4 && condition5) {
                    DAO<Docteur> docteurDAO = new DocteurDAO();
                    try {
                        int numero = Integer.parseInt(T1.getText());
                        String nom = T2.getText();
                        String prenom = T3.getText();
                        String adresse = T4.getText();
                        String tel = T5.getText();
                        String spe = ComboB.getSelectedItem().toString();
                        ArrayList<Integer> tab_ma = new ArrayList<>();

                        //récupération des docteurs sélectionnés
                        CustomModel model = (CustomModel) Table_md.getModel();

                        for (int i = 0; i < model.getRowCount(); i++) {
                            if ((Boolean) model.getValueAt(i, (model.getColumnCount() - 1))) {
                                tab_ma.add(Integer.parseInt(model.getValueAt(i, 0).toString()));
                            }
                        }

                        EmployeDAO empDAO = new EmployeDAO();
                        tab = empDAO.all();
                        for (int i = 0; i < tab.size(); i++) {
                            Employe emp = (Employe) tab.get(i);
                            int numero_test = emp.getNumero();
                            if (numero_test == numero) {
                                numero = Integer.parseInt("a");
                            }

                        }
                        Docteur doc = new Docteur(numero, nom, prenom, tel, adresse, spe);
                        doc.setTab_ma(tab_ma);
                        docteurDAO.create(doc);

                        jOptionPane1.showMessageDialog(null, "Le docteur a bien été enregistré.", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                        setNullText();
                        setAllMaladeTable();
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        jOptionPane1.showMessageDialog(null, "Ce numero est déjà utilisé dans la base de donnée", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }

                }
                break;

            case "Infirmier":
                //BLINDAGE
                //No est vide
                if (T1.getText().length() > 4 || T1.getText().length() == 0) {
                    T1.setBackground(Color.red);
                    condition1 = false;
                } else {
                    condition1 = true;
                    T1.setBackground(Color.white);
                    try {
                        int test = Integer.parseInt(T1.getText());
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        condition1 = false;
                        jOptionPane1.showMessageDialog(null, "Le numero de l'infirmier doit être comprise entre 0 et 9999", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }
                }
                //Nom est vide
                if (T2.getText().length() > 12 || T2.getText().length() == 0) {
                    T2.setBackground(Color.red);
                    condition2 = false;
                } else {
                    condition2 = true;
                    T2.setBackground(Color.white);
                }
                //Prenom est vide
                if (T3.getText().length() > 12 || T3.getText().length() == 0) {
                    T3.setBackground(Color.red);
                    condition3 = false;
                } else {
                    condition3 = true;
                    T3.setBackground(Color.white);
                }
                //Adresse est vide
                if (T4.getText().length() > 40 || T4.getText().length() == 0) {
                    T4.setBackground(Color.red);
                    condition4 = false;
                } else {
                    condition4 = true;
                    T4.setBackground(Color.white);
                }
                //Tel est vide
                if (T5.getText().length() != 14) {
                    T5.setBackground(Color.red);
                    condition5 = false;
                    jOptionPane1.showMessageDialog(null, "Le format du tel doit être : 00 00 00 00 00", "ERREUR", JOptionPane.ERROR_MESSAGE);
                } else {
                    condition5 = true;
                    T5.setBackground(Color.white);
                }
                //Salaire est vide
                condition6 = true;
                T7.setBackground(Color.white);
                try {
                    double test = Double.parseDouble(T7.getText());
                    if (test > 9999.99) {
                        test = Double.parseDouble("a");
                    }
                } catch (NumberFormatException e) {
                    T7.setBackground(Color.red);
                    condition6 = false;
                    jOptionPane1.showMessageDialog(null, "Le salaire est incorrect", "ERREUR", JOptionPane.ERROR_MESSAGE);
                }

                if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6) {
                    DAO<Infirmier> infirmierDAO = new InfirmierDAO();
                    try {
                        int numero = Integer.parseInt(T1.getText());
                        String code = Combo1.getSelectedItem().toString();
                        String nom = T2.getText();
                        String prenom = T3.getText();
                        String adresse = T4.getText();
                        String tel = T5.getText();
                        String rotation = ComboB.getSelectedItem().toString();
                        double salaire = Double.parseDouble(T7.getText());

                        EmployeDAO empDAO = new EmployeDAO();
                        tab = empDAO.all();
                        for (int i = 0; i < tab.size(); i++) {
                            Employe emp = (Employe) tab.get(i);
                            int numero_test = emp.getNumero();
                            if (numero_test == numero) {
                                numero = Integer.parseInt("a");
                            }
                        }
                        Infirmier inf = new Infirmier(numero, nom, prenom, tel, adresse, code, rotation, salaire);
                        infirmierDAO.create(inf);
                        jOptionPane1.showMessageDialog(null, "L'infirmier a bien été enregistré.", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                        setNullText();
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        jOptionPane1.showMessageDialog(null, "Ce numero est déjà utilisé dans la base de donnée", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }

                }
                break;
            case "Malade":
                //BLINDAGE
                //No est vide
                if (T1.getText().length() > 4 || T1.getText().length() == 0) {
                    T1.setBackground(Color.red);
                    condition1 = false;
                } else {
                    condition1 = true;
                    T1.setBackground(Color.white);
                    try {
                        int test = Integer.parseInt(T1.getText());
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        condition1 = false;
                        jOptionPane1.showMessageDialog(null, "Le numero du malade doit être comprise entre 0 et 9999", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }
                }
                //Nom est vide
                if (T2.getText().length() > 12 || T2.getText().length() == 0) {
                    T2.setBackground(Color.red);
                    condition2 = false;
                } else {
                    condition2 = true;
                    T2.setBackground(Color.white);
                }
                //Prenom est vide
                if (T3.getText().length() > 12 || T3.getText().length() == 0) {
                    T3.setBackground(Color.red);
                    condition3 = false;
                } else {
                    condition3 = true;
                    T3.setBackground(Color.white);
                }
                //Adresse est vide 
                if (T4.getText().length() > 40 || T4.getText().length() == 0) {
                    T4.setBackground(Color.red);
                    condition4 = false;
                } else {
                    condition4 = true;
                    T4.setBackground(Color.white);
                }
                //Tel est vide 
                if (T5.getText().length() != 14) {
                    T5.setBackground(Color.red);
                    condition5 = false;
                    jOptionPane1.showMessageDialog(null, "Le format du tel doit être : 00 00 00 00 00", "ERREUR", JOptionPane.ERROR_MESSAGE);
                } else {
                    condition5 = true;
                    T5.setBackground(Color.white);
                }
                //Mutuelle est vide
                if (T7.getText().length() > 6 || T7.getText().length() == 0) {
                    T7.setBackground(Color.red);
                    condition6 = false;
                } else {
                    condition6 = true;
                    T7.setBackground(Color.white);
                }

                if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6) {
                    try {
                        int numero = Integer.parseInt(T1.getText());
                        String nom = T2.getText();
                        String prenom = T3.getText();
                        String adresse = T4.getText();
                        String tel = T5.getText();
                        String mutuelle = T7.getText();
                        ArrayList<Integer> tab_doc = new ArrayList<>();

                        //récupération des docteurs sélectionnés
                        CustomModel model = (CustomModel) Table_md.getModel();

                        for (int i = 0; i < model.getRowCount(); i++) {
                            if ((Boolean) model.getValueAt(i, (model.getColumnCount() - 1))) {
                                tab_doc.add(Integer.parseInt(model.getValueAt(i, 0).toString()));
                            }
                        }

                        MaladeDAO maladeDAO = new MaladeDAO();
                        tab = maladeDAO.all();
                        for (int i = 0; i < tab.size(); i++) {
                            Malade malade_test = (Malade) tab.get(i);
                            int numero_test = malade_test.getNumero();
                            if (numero_test == numero) {
                                numero = Integer.parseInt("a");
                            }
                        }
                        Malade malade = new Malade(numero, nom, prenom, tel, adresse, mutuelle);
                        malade.setTab_docteur(tab_doc);
                        maladeDAO.create(malade);
                        jOptionPane1.showMessageDialog(null, "Le malade a bien été enregistré.", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                        setNullText();
                        setAllDocteurTable();
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        jOptionPane1.showMessageDialog(null, "Ce numero est déjà utilisé dans la base de donnée", "ERREUR", JOptionPane.ERROR_MESSAGE);
                    }

                }
                break;
            case "Service":
                //BLINDAGE
                //Code est vide
                if (T1.getText().length() > 3 || T1.getText().length() == 0) {
                    T1.setBackground(Color.red);
                    condition1 = false;
                } else {
                    condition1 = true;
                    T1.setBackground(Color.white);
                }
                //Nom est vide
                if (T2.getText().length() > 30 || T2.getText().length() == 0) {
                    T2.setBackground(Color.red);
                    condition2 = false;
                } else {
                    T2.setBackground(Color.white);
                    condition2 = true;
                }
                //Batiment est vide
                if (T3.getText().length() > 1 || T2.getText().length() == 0) {
                    T3.setBackground(Color.red);
                    condition3 = false;
                } else {
                    T3.setBackground(Color.white);
                    condition3 = true;
                }

                if (condition1 && condition2 && condition3) {
                    try {
                        String code = T1.getText();
                        String nom = T2.getText();
                        String batiment = T3.getText();
                        int directeur = Integer.parseInt(Combo3.getSelectedItem().toString());

                        ServiceDAO servDAO = new ServiceDAO();
                        tab = servDAO.all();
                        for (int i = 0; i < tab.size(); i++) {
                            Service serv = (Service) tab.get(i);
                            String code_test = serv.getCode();
                            if (code.equals(code_test)) {
                                int no = Integer.parseInt("a");
                            }
                        }

                        Service serv = new Service(code, nom, batiment, directeur);
                        servDAO.create(serv);
                        jOptionPane1.showMessageDialog(null, "Le service a bien été enregistré.", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                        setNullText();
                    } catch (NumberFormatException e) {
                        T1.setBackground(Color.red);
                        jOptionPane1.showMessageDialog(null, "Ce code service existe déjà dans la base de donnée", "VALIDATION", JOptionPane.PLAIN_MESSAGE);
                    }

                }
                break;

        }
    }//GEN-LAST:event_BoutonAjoActionPerformed

    private void Combo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Combo1ActionPerformed

    private void Combo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Combo2ActionPerformed

    private void Combo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Combo3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Requete req = new Requete();
        req.setTitle("Rechercher");
        req.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton BoutonAff;
    private javax.swing.JButton BoutonAjo;
    private javax.swing.JToggleButton BoutonSuppr;
    private javax.swing.JComboBox Combo1;
    private javax.swing.JComboBox Combo2;
    private javax.swing.JComboBox Combo3;
    private javax.swing.JComboBox ComboB;
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L10;
    private javax.swing.JLabel L11;
    private javax.swing.JLabel L12;
    private javax.swing.JLabel L2;
    private javax.swing.JLabel L3;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JLabel L7;
    private javax.swing.JLabel L8;
    private javax.swing.JLabel L9;
    private javax.swing.JLabel LabelChoix;
    private javax.swing.JLabel LabelTable;
    private javax.swing.JScrollPane PanelChoix;
    private javax.swing.JScrollPane PanelLecture;
    private javax.swing.JTextField T1;
    private javax.swing.JTextField T2;
    private javax.swing.JTextField T3;
    private javax.swing.JTextField T4;
    private javax.swing.JTextField T5;
    private javax.swing.JTextField T7;
    private javax.swing.JTextField T8;
    private javax.swing.JTable Table_md;
    public javax.swing.JComboBox choix_table;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTable table_aff;
    // End of variables declaration//GEN-END:variables
}
